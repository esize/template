name: Django Format, Lint, and Check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  format:
    name: Format Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [black, isort, djlint]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install ${{ matrix.tool }}
        run: pip install ${{ matrix.tool }}
      - name: Run ${{ matrix.tool }}
        run: |
          if [ "${{ matrix.tool }}" = "black" ]; then
            black university
          elif [ "${{ matrix.tool }}" = "isort" ]; then
            isort university
          elif [ "${{ matrix.tool }}" = "djlint" ]; then
            djlint --reformat university
          fi
      - name: Upload formatted code
        uses: actions/upload-artifact@v4
        with:
          name: formatted-code-${{ matrix.tool }}
          path: university
          retention-days: 1

  apply-changes:
    name: Apply Formatting Changes
    needs: format
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      changes_made: ${{ steps.commit-changes.outputs.changes_made }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: formatted-code
      - name: Apply changes
        run: |
          for dir in formatted-code/formatted-code-*; do
            cp -R "$dir"/* university/
          done
          rm -rf formatted-code
      - name: Commit changes
        id: commit-changes
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Apply automatic formatting"
            git push
            echo "changes_made=true" >> $GITHUB_OUTPUT
          fi

  notify:
    name: Notify about changes
    needs: apply-changes
    runs-on: ubuntu-latest
    if: needs.apply-changes.outputs.changes_made == 'true'
    steps:
      - name: Notify about changes
        run: |
          echo "Formatting changes were applied directly to the branch."

  lint:
    name: Lint and Check
    needs: apply-changes
    runs-on: ubuntu-latest
    if: always()
    strategy:
      matrix:
        tool: [flake8, black, djlint, isort]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: Run ${{ matrix.tool }}
        run: tox -e ${{ matrix.tool }}

  cleanup:
    name: Cleanup Artifacts
    needs: [apply-changes, notify, lint]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: formatted-code-*
          failOnError: false
